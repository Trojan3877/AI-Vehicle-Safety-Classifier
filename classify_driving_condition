"""
AI Vehicle Safety Classifier

This application uses a pre-trained TensorFlow model to classify driving conditions as safe or unsafe based on input images. It processes an image through the model, outputting a probability score, and classifies the condition using a configurable threshold. Designed for autonomous vehicle safety systems, it aims to enhance real-time hazard detection.
"""

import tensorflow as tf
import numpy as np

def load_model(model_path: str) -> tf.keras.Model:
    """
    Load a pre-trained TensorFlow model from the specified path.

    Args:
        model_path (str): Path to the saved model file.

    Returns:
        tf.keras.Model: The loaded TensorFlow model.
    """
    model = tf.keras.models.load_model(model_path)
    return model

def classify_driving_condition(model: tf.keras.Model, image_array: np.ndarray, threshold: float = 0.5) -> str:
    """
    Classify the driving condition as safe or unsafe based on an image.

    Args:
        model (tf.keras.Model): The pre-trained model for classification.
        image_array (np.ndarray): The input image as a NumPy array.
        threshold (float): The probability threshold for classification (default: 0.5).

    Returns:
        str: "Safe" or "Unsafe" based on the model's prediction.
    """
    image_array = np.expand_dims(image_array, axis=0)
    prediction = model.predict(image_array)[0][0]
    if prediction > threshold:
        return "Safe"
    else:
        return "Unsafe"

# Example usage
if __name__ == "__main__":
    DEFAULT_THRESHOLD = 0.5
    model_path = "path/to/model.h5"
    image = np.random.rand(224, 224, 3)  # Dummy image for testing
    model = load_model(model_path)
    result = classify_driving_condition(model, image, threshold=DEFAULT_THRESHOLD)
    print(f"Driving condition: {result}")
